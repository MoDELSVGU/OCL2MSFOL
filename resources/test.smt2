(set-logic UFSLIA)
(set-option :produce-models true)
(declare-sort Classifier 0)
(declare-sort Type 0)
(declare-const nullClassifier Classifier)
(declare-const invalidClassifier Classifier)
(declare-const nullInt Int)
(declare-const invalidInt Int)
(declare-const nullString String)
(declare-const invalidString String)
(assert (distinct nullClassifier invalidClassifier))
(assert (distinct nullInt invalidInt))
(assert (distinct nullString invalidString))
(declare-fun OclIsTypeOf (Classifier Type) Bool)
(declare-fun OclIsKindOf (Classifier Type) Bool)
(declare-fun Reg_User (Classifier) Bool)
(assert (not (Reg_User nullClassifier)))
(declare-const Reg_UserType Type)
(declare-fun Student (Classifier) Bool)
(assert (not (Student nullClassifier)))
(declare-const StudentType Type)
(declare-fun Lecturer (Classifier) Bool)
(assert (not (Lecturer nullClassifier)))
(declare-const LecturerType Type)
(assert (not (Reg_User invalidClassifier)))
(declare-fun name_Reg_User (Classifier) String)
(assert (= (name_Reg_User nullClassifier) invalidString))
(assert (= (name_Reg_User invalidClassifier) invalidString))
(assert (forall ((x Classifier))
    (=> (or (Reg_User x) (Lecturer x) (Student x))
        (distinct (name_Reg_User x) invalidString))))
(declare-fun email_Reg_User (Classifier) String)
(assert (= (email_Reg_User nullClassifier) invalidString))
(assert (= (email_Reg_User invalidClassifier) invalidString))
(assert (forall ((x Classifier))
    (=> (or (Reg_User x) (Lecturer x) (Student x))
        (distinct (email_Reg_User x) invalidString))))
(declare-fun age_Reg_User (Classifier) Int)
(assert (= (age_Reg_User nullClassifier) invalidInt))
(assert (= (age_Reg_User invalidClassifier) invalidInt))
(assert (forall ((x Classifier))
    (=> (or (Reg_User x) (Lecturer x) (Student x))
        (distinct (age_Reg_User x) invalidInt))))
(assert (distinct Reg_UserType StudentType))
(assert (distinct Reg_UserType LecturerType))
(assert (forall ((x Classifier))
    (and (=> (Reg_User x)
             (OclIsTypeOf x Reg_UserType))
         (=> (OclIsTypeOf x Reg_UserType)
             (Reg_User x)))))
(assert (forall ((x Classifier))
    (and (=> (or (Reg_User x) (Lecturer x) (Student x))
             (OclIsKindOf x Reg_UserType))
         (=> (OclIsKindOf x Reg_UserType)
             (or (Reg_User x) (Lecturer x) (Student x))))))
(assert (not (Student invalidClassifier)))
(assert (distinct StudentType Reg_UserType))
(assert (distinct StudentType LecturerType))
(assert (forall ((x Classifier))
    (and (=> (Student x)
             (OclIsTypeOf x StudentType))
         (=> (OclIsTypeOf x StudentType)
             (Student x)))))
(assert (forall ((x Classifier))
    (and (=> (Student x)
             (OclIsKindOf x StudentType))
         (=> (OclIsKindOf x StudentType)
             (Student x)))))
(assert (not (Lecturer invalidClassifier)))
(declare-fun salary_Lecturer (Classifier) Int)
(assert (= (salary_Lecturer nullClassifier) invalidInt))
(assert (= (salary_Lecturer invalidClassifier) invalidInt))
(assert (forall ((x Classifier))
    (=> (Lecturer x)
        (distinct (salary_Lecturer x) invalidInt))))
(assert (distinct LecturerType Reg_UserType))
(assert (distinct LecturerType StudentType))
(assert (forall ((x Classifier))
    (and (=> (Lecturer x)
             (OclIsTypeOf x LecturerType))
         (=> (OclIsTypeOf x LecturerType)
             (Lecturer x)))))
(assert (forall ((x Classifier))
    (and (=> (Lecturer x)
             (OclIsKindOf x LecturerType))
         (=> (OclIsKindOf x LecturerType)
             (Lecturer x)))))
(declare-fun lecturers_students (Classifier Classifier) Bool)
(assert (forall ((x Classifier))
    (forall ((y Classifier)) 
        (=> (lecturers_students x y) 
            (and (Lecturer x) (Student x))))))
(declare-fun Reg_User_supervisor (Classifier) Classifier)
(assert (= (Reg_User_supervisor nullClassifier) invalidClassifier))
(assert (= (Reg_User_supervisor invalidClassifier) invalidClassifier))
(assert (forall ((x Classifier))
    (=> (Reg_User x)
        (or (= (Reg_User_supervisor x) nullClassifier)
            (Reg_User (Reg_User_supervisor x))))))
(declare-fun Reg_User_supervisees (Classifier Classifier) Bool)
(assert (forall ((x Classifier))
    (forall ((y Classifier)) 
        (=> (Reg_User_supervisees x y) 
            (and (or (Reg_User x) (Lecturer x) (Student x)) (or (Reg_User x) (Lecturer x) (Student x)))))))
(assert (forall ((x Classifier))
    (forall ((y Classifier))
        (=> (and (Reg_User x)
                 (Reg_User y)
                 (= (Reg_User_supervisor y) x))
            (Reg_User_supervisees x y)))))
(assert (forall ((x Classifier))
    (forall ((y Classifier))
        (=> (Reg_User_supervisees x y)
            (= (Reg_User_supervisor y) x)))))
(assert (forall ((x Classifier)) 
    (=> (Reg_User x) (not (or (Student x) (Lecturer x))))))
(assert (forall ((x Classifier)) 
    (=> (Student x) (not (or (Reg_User x) (Lecturer x))))))
(assert (forall ((x Classifier)) 
    (=> (Lecturer x) (not (or (Reg_User x) (Student x))))))
; There is at least one student
(assert (exists ((x Classifier))(and (Student x) (not false))))
; There is at least one lecturer
(assert (exists ((x Classifier))(and (Lecturer x) (not false))))
; All lecturers must have a salary
(assert (forall ((l Classifier))(and (=> (Lecturer l) (and (not (or (= (salary_Lecturer l) nullInt) (or (= l nullClassifier) (= l invalidClassifier)))) (not (or (= l nullClassifier) (= l invalidClassifier))))) (not false))))
; All salary must be positive
(assert (forall ((l Classifier))(and (=> (Lecturer l) (and (not (= (salary_Lecturer l) 0)) (not (or (= (salary_Lecturer l) nullInt) false (or (= l nullClassifier) (= l invalidClassifier)) false)))) (not false))))
; All names must be unique
(assert (forall ((ru1 Classifier))(and (=> (Reg_User ru1) (forall ((ru2 Classifier))(and (=> (Reg_User ru2) (or (and (not (= (name_Reg_User ru1) (name_Reg_User ru2))) (not (or (= (name_Reg_User ru1) nullString) (= (name_Reg_User ru2) nullString) (or (= ru1 nullClassifier) (= ru1 invalidClassifier)) (or (= ru2 nullClassifier) (= ru2 invalidClassifier))))) (or (and (= ru1 nullClassifier) (= ru2 nullClassifier)) (and (= ru1 ru2) (not (or (= ru1 nullClassifier) (= ru1 invalidClassifier) (= ru2 nullClassifier) (= ru2 invalidClassifier))))))) (not false)))) (not false))))
(check-sat)
