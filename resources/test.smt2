(set-logic UFSLIA)
(set-option :produce-models true)
(declare-sort Classifier 0)
(declare-sort Type 0)
(declare-const nullClassifier Classifier)
(declare-const invalidClassifier Classifier)
(declare-const nullInt Int)
(declare-const invalidInt Int)
(declare-const nullString String)
(declare-const invalidString String)
(assert (distinct nullClassifier invalidClassifier))
(assert (distinct nullInt invalidInt))
(assert (distinct nullString invalidString))
(declare-fun OclIsTypeOf (Classifier Type) Bool)
(declare-fun OclIsKindOf (Classifier Type) Bool)
(declare-fun Employee (Classifier) Bool)
(assert (not (Employee nullClassifier)))
(declare-const EmployeeType Type)
(assert (not (Employee invalidClassifier)))
(declare-fun name_Employee (Classifier) String)
(assert (= (name_Employee nullClassifier) invalidString))
(assert (= (name_Employee invalidClassifier) invalidString))
(assert (forall ((x Classifier))
    (=> (Employee x)
        (distinct (name_Employee x) invalidString))))
(declare-fun salary_Employee (Classifier) Int)
(assert (= (salary_Employee nullClassifier) invalidInt))
(assert (= (salary_Employee invalidClassifier) invalidInt))
(assert (forall ((x Classifier))
    (=> (Employee x)
        (distinct (salary_Employee x) invalidInt))))
(declare-fun email_Employee (Classifier) String)
(assert (= (email_Employee nullClassifier) invalidString))
(assert (= (email_Employee invalidClassifier) invalidString))
(assert (forall ((x Classifier))
    (=> (Employee x)
        (distinct (email_Employee x) invalidString))))
(declare-fun employmentLevel_Employee (Classifier) Int)
(assert (= (employmentLevel_Employee nullClassifier) invalidInt))
(assert (= (employmentLevel_Employee invalidClassifier) invalidInt))
(assert (forall ((x Classifier))
    (=> (Employee x)
        (distinct (employmentLevel_Employee x) invalidInt))))
(assert (forall ((x Classifier))
    (and (=> (Employee x)
             (OclIsTypeOf x EmployeeType))
         (=> (OclIsTypeOf x EmployeeType)
             (Employee x)))))
(assert (forall ((x Classifier))
    (and (=> (Employee x)
             (OclIsKindOf x EmployeeType))
         (=> (OclIsKindOf x EmployeeType)
             (Employee x)))))
(declare-fun Supervision (Classifier Classifier) Bool)
(assert (forall ((x Classifier))
    (forall ((y Classifier)) 
        (=> (Supervision x y) 
            (and (Employee x) (Employee y))))))
; Generating invariants
; Ad-hoc Contextual Model
; kcaller = kself or kcaller.employmentLevel <= kself.employmentLevel
(declare-const kcaller Classifier)
(assert (Employee kcaller))
(declare-const kself Classifier)
(assert (Employee kself))
(assert (or (or (and (= kcaller nullClassifier) (= kself nullClassifier)) (and (= kcaller kself) (not (or (= kcaller nullClassifier) (= kcaller invalidClassifier) (= kself nullClassifier) (= kself invalidClassifier))))) (and (< (employmentLevel_Employee kcaller) (employmentLevel_Employee kself)) (not (or (= (employmentLevel_Employee kcaller) nullInt) (or (= kcaller nullClassifier) (= kcaller invalidClassifier)) (= (employmentLevel_Employee kself) nullInt) (or (= kself nullClassifier) (= kself invalidClassifier)))))))
(check-sat)
